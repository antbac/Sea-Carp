using SeaCarp.ViewModels;

namespace SeaCarp.Controllers;

public class ChallengesController : Controller
{
    private readonly ILogger<ChallengesController> _logger;

    public ChallengesController(ILogger<ChallengesController> logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        return View(new Presentation.ViewModels.Challenges.Challenge[] {
            new() { Name = "[SOURCE] Juice Shop: API-only XSS" },
            new() { Name = "[SOURCE] Juice Shop: Access Log" },
            new() { Name = "[SOURCE] Juice Shop: Admin Registration" },
            new() { Name = "[SOURCE] Juice Shop: Admin Section" },
            new() { Name = "[SOURCE] Juice Shop: Arbitrary File Write" },
            new() { Name = "[SOURCE] Juice Shop: Bjoern's Favorite Pet" },
            new() { Name = "[SOURCE] Juice Shop: Blockchain Hype" },
            new() { Name = "[SOURCE] Juice Shop: Blocked RCE DoS" },
            new() { Name = "[SOURCE] Juice Shop: CAPTCHA Bypass" },
            new() { Name = "[SOURCE] Juice Shop: Change Bender's Password" },
            new() { Name = "[SOURCE] Juice Shop: Christmas Special" },
            new() { Name = "[SOURCE] Juice Shop: CSP Bypass" },
            new() { Name = "[SOURCE] Juice Shop: Client-side XSS Protection" },
            new() { Name = "[SOURCE] Juice Shop: Confidential Document" },
            new() { Name = "[SOURCE] Juice Shop: DOM XSS" },
            new() { Name = "[SOURCE] Juice Shop: Database Schema" },
            new() { Name = "[SOURCE] Juice Shop: Deprecated Interface" },
            new() { Name = "[SOURCE] Juice Shop: Easter Egg" },
            new() { Name = "[SOURCE] Juice Shop: Email Leak" },
            new() { Name = "[SOURCE] Juice Shop: Ephemeral Accountant" },
            new() { Name = "[SOURCE] Juice Shop: Error Handling" },
            new() { Name = "[SOURCE] Juice Shop: Expired Coupon" },
            new() { Name = "[SOURCE] Juice Shop: Extra Language" },
            new() { Name = "[SOURCE] Juice Shop: Five-Star Feedback" },
            new() { Name = "[SOURCE] Juice Shop: Forged Coupon" },
            new() { Name = "[SOURCE] Juice Shop: Forged Feedback" },
            new() { Name = "[SOURCE] Juice Shop: Forged Review" },
            new() { Name = "[SOURCE] Juice Shop: Forged Signed JWT" },
            new() { Name = "[SOURCE] Juice Shop: Forgotten Developer Backup" },
            new() { Name = "[SOURCE] Juice Shop: Forgotten Sales Backup" },
            new() { Name = "[SOURCE] Juice Shop: Frontend Typosquatting" },
            new() { Name = "[SOURCE] Juice Shop: GDPR Data Erasure" },
            new() { Name = "[SOURCE] Juice Shop: GDPR Data Theft" },
            new() { Name = "[SOURCE] Juice Shop: HTTP-Header XSS" },
            new() { Name = "[SOURCE] Juice Shop: Imaginary Challenge" },
            new() { Name = "[SOURCE] Juice Shop: Leaked Access Logs" },
            new() { Name = "[SOURCE] Juice Shop: Leaked Unsafe Product" },
            new() { Name = "[SOURCE] Juice Shop: Legacy Typosquatting" },
            new() { Name = "[SOURCE] Juice Shop: Login Admin" },
            new() { Name = "[SOURCE] Juice Shop: Login Amy" },
            new() { Name = "[SOURCE] Juice Shop: Login Bender" },
            new() { Name = "[SOURCE] Juice Shop: Login Bjoern" },
            new() { Name = "[SOURCE] Juice Shop: Login Jim" },
            new() { Name = "[SOURCE] Juice Shop: Login MC SafeSearch" },
            new() { Name = "[SOURCE] Juice Shop: Login Support Team" },
            new() { Name = "[SOURCE] Juice Shop: Manipulate Basket" },
            new() { Name = "[SOURCE] Juice Shop: Misplaced Signature File" },
            new() { Name = "[SOURCE] Juice Shop: Multiple Likes" },
            new() { Name = "[SOURCE] Juice Shop: Nested Easter Egg" },
            new() { Name = "[SOURCE] Juice Shop: NoSQL DoS" },
            new() { Name = "[SOURCE] Juice Shop: NoSQL Exfiltration" },
            new() { Name = "[SOURCE] Juice Shop: NoSQL Manipulation" },
            new() { Name = "[SOURCE] Juice Shop: Outdated Allowlist" },
            new() { Name = "[SOURCE] Juice Shop: Password Strength" },
            new() { Name = "[SOURCE] Juice Shop: Payback Time" },
            new() { Name = "[SOURCE] Juice Shop: Premium Paywall" },
            new() { Name = "[SOURCE] Juice Shop: Product Tampering" },
            new() { Name = "[SOURCE] Juice Shop: Reflected XSS" },
            new() { Name = "[SOURCE] Juice Shop: Repetitive Registration" },
            new() { Name = "[SOURCE] Juice Shop: Reset Bender's Password" },
            new() { Name = "[SOURCE] Juice Shop: Reset Bjoern's Password" },
            new() { Name = "[SOURCE] Juice Shop: Reset Jim's Password" },
            new() { Name = "[SOURCE] Juice Shop: Reset Morty's Password" },
            new() { Name = "[SOURCE] Juice Shop: Retrieve Blueprint" },
            new() { Name = "[SOURCE] Juice Shop: SSRF" },
            new() { Name = "[SOURCE] Juice Shop: SSTi" },
            new() { Name = "[SOURCE] Juice Shop: Score Board" },
            new() { Name = "[SOURCE] Juice Shop: Security Policy" },
            new() { Name = "[SOURCE] Juice Shop: Server-side XSS Protection" },
            new() { Name = "[SOURCE] Juice Shop: Steganography" },
            new() { Name = "[SOURCE] Juice Shop: Successful RCE DoS" },
            new() { Name = "[SOURCE] Juice Shop: Supply Chain Attack" },
            new() { Name = "[SOURCE] Juice Shop: Two Factor Authentication" },
            new() { Name = "[SOURCE] Juice Shop: Unsigned JWT" },
            new() { Name = "[SOURCE] Juice Shop: Upload Size" },
            new() { Name = "[SOURCE] Juice Shop: Upload Type" },
            new() { Name = "[SOURCE] Juice Shop: User Credentials" },
            new() { Name = "[SOURCE] Juice Shop: Video XSS" },
            new() { Name = "[SOURCE] Juice Shop: View Basket" },
            new() { Name = "[SOURCE] Juice Shop: Vulnerable Library" },
            new() { Name = "[SOURCE] Juice Shop: Weird Crypto" },
            new() { Name = "[SOURCE] Juice Shop: Allowlist Bypass" },
            new() { Name = "[SOURCE] Juice Shop: XXE Data Access" },
            new() { Name = "[SOURCE] Juice Shop: XXE DoS" },
            new() { Name = "[SOURCE] Juice Shop: Zero Stars" },
            new() { Name = "[SOURCE] Juice Shop: Missing Encoding" },
            new() { Name = "[SOURCE] Juice Shop: Cross-Site Imaging" },
            new() { Name = "[SOURCE] Juice Shop: Exposed Metrics" },
            new() { Name = "[SOURCE] Juice Shop: Deluxe Fraud" },
            new() { Name = "[SOURCE] Juice Shop: CSRF" },
            new() { Name = "[SOURCE] Juice Shop: Bonus Payload" },
            new() { Name = "[SOURCE] Juice Shop: Reset Uvogin's Password" },
            new() { Name = "[SOURCE] Juice Shop: Meta Geo Stalking" },
            new() { Name = "[SOURCE] Juice Shop: Visual Geo Stalking" },
            new() { Name = "[SOURCE] Juice Shop: Kill Chatbot" },
            new() { Name = "[SOURCE] Juice Shop: Poison Null Byte" },
            new() { Name = "[SOURCE] Juice Shop: Bully Chatbot" },
            new() { Name = "[SOURCE] Juice Shop: Local File Read" },
            new() { Name = "[SOURCE] Juice Shop: Mass Dispel" },
            new() { Name = "[SOURCE] MITRE: CWE 79: XSS (https://cwe.mitre.org/data/definitions/79.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 78: OS Command Injection (https://cwe.mitre.org/data/definitions/78.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 22: Path Traversal (https://cwe.mitre.org/data/definitions/22.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 352: CSRF (https://cwe.mitre.org/data/definitions/352.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 434: Unrestricted Upload of File Type (https://cwe.mitre.org/data/definitions/434.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 476: NULL Pointer Dereference (https://cwe.mitre.org/data/definitions/476.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 502: Deserialization of Untrusted Data (https://cwe.mitre.org/data/definitions/502.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 190: Integer Overflow or Wraparound (https://cwe.mitre.org/data/definitions/190.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 287: Improper Authentication (https://cwe.mitre.org/data/definitions/287.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 862: Missing Authorization (https://cwe.mitre.org/data/definitions/862.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 77: Command Injection (https://cwe.mitre.org/data/definitions/77.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 306: Missing Authentication for Critical Function (https://cwe.mitre.org/data/definitions/306.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 276: Incorrect Default Permissions (https://cwe.mitre.org/data/definitions/276.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 918: SSRF (https://cwe.mitre.org/data/definitions/918.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 362: Race Condition (https://cwe.mitre.org/data/definitions/362.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 400: Uncontrolled Resource Consumption (https://cwe.mitre.org/data/definitions/400.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 611: Improper Restriction of XML External Entity Reference (https://cwe.mitre.org/data/definitions/611.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 94: Code Injection (https://cwe.mitre.org/data/definitions/94.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 89: SQL Injection (https://cwe.mitre.org/data/definitions/89.html)" },
            new() { Name = "[SOURCE] MITRE: CWE 20: Improper Input Validation (https://cwe.mitre.org/data/definitions/20.html)" },
            new() { Name = "[SOURCE] OWASP TOP 10: Broken Access Control" },
            new() { Name = "[SOURCE] OWASP TOP 10: Cryptographic Failures" },
            new() { Name = "[SOURCE] OWASP TOP 10: Injection" },
            new() { Name = "[SOURCE] OWASP TOP 10: Insecure Design" },
            new() { Name = "[SOURCE] OWASP TOP 10: Security Misconfiguration" },
            new() { Name = "[SOURCE] OWASP TOP 10: Vulnerable and Outdated Components" },
            new() { Name = "[SOURCE] OWASP TOP 10: Identification and Authentication Failures" },
            new() { Name = "[SOURCE] OWASP TOP 10: Software and Data Integrity" },
            new() { Name = "[SOURCE] OWASP TOP 10: Security Logging and Monitoring" },
            new() { Name = "[SOURCE] OWASP TOP 10: Server-Side Request Forgery" },
            new() { Name = "[SOURCE] OWASP API TOP 10: BROKEN OBJECT LEVEL AUTHORIZATION" },
            new() { Name = "[SOURCE] OWASP API TOP 10: BROKEN AUTHENTICATION" },
            new() { Name = "[SOURCE] OWASP API TOP 10: EXCESSIVE DATA EXPOSURE" },
            new() { Name = "[SOURCE] OWASP API TOP 10: LACK OF RESOURCES & RATE LIMITING" },
            new() { Name = "[SOURCE] OWASP API TOP 10: BROKEN FUNCTION LEVEL AUTHORIZATION" },
            new() { Name = "[SOURCE] OWASP API TOP 10: MASS ASSIGNMENT" },
            new() { Name = "[SOURCE] OWASP API TOP 10: SECURITY MISCONFIGURATION" },
            new() { Name = "[SOURCE] OWASP API TOP 10: INJECTION" },
            new() { Name = "[SOURCE] OWASP API TOP 10: IMPROPER ASSETS MANAGEMENT" },
            new() { Name = "[SOURCE] OWASP API TOP 10: INSUFFICIENT LOGGING & MONITORING" },
            new() { Name = "[SOURCE] Misc: CSP bypass: https://portswigger.net/research/bypassing-csp-with-policy-injection" },
        });
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}